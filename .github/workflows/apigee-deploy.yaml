# This is a basic workflow to deploy an ApigeeX proxy

name: Deploy Apigee X Proxy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  APIGEE_X_ORG: ${{ secrets.APIGEE_X_ORG }}
  APIGEE_X_ENV: public
  APIGEE_PROXY_NAME: httpbin-proxy

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Select branch for environment
        id: select_branch
        run: |
          echo "branch=main" >> $GITHUB_OUTPUT
          # if [ "${{ github.event.inputs.environment }}" = "dev" ]; then
          #   echo "branch=main" >> $GITHUB_OUTPUT
          # # elif [ "${{ github.event.inputs.environment }}" = "sit" ]; then
          # #   echo "branch=feature/sit" >> $GITHUB_OUTPUT
          # elif [ "${{ github.event.inputs.environment }}" = "prod" ]; then
          #   echo "branch=feature/prod" >> $GITHUB_OUTPUT
          # fi
      
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.APIGEE_SA_KEY }}
          project_id: ${{ secrets.APIGEE_X_ORG }}
          export_default_credentials: true

      - name: Install Apigee CLI
        run: |
          curl -sLO https://github.com/apigee/apigeecli/releases/download/v2.13.0/apigeecli_v2.13.0_Linux_x86_64.zip
          tar -xzf apigeecli_v2.13.0_Linux_x86_64.zip
          sudo mv apigeecli_v2.13.0_Linux_x86_64/apigeecli /usr/local/bin/
          
      - name: Deploy Apigee X Proxy
        run: |
          apigeecli apis import --org "$APIGEE_X_ORG" --env "$APIGEE_X_ENV" --token "$(gcloud auth print-access-token)" --file ./apiproxy --name "$APIGEE_PROXY_NAME"
          apigeecli apis deploy --org "$APIGEE_X_ORG" --env "$APIGEE_X_ENV" --token "$(gcloud auth print-access-token)" --name "$APIGEE_PROXY_NAME" --override

      - name: Output Deployment Info
        run: |
          echo "Deployed $APIGEE_PROXY_NAME to environment $APIGEE_X_ENV in project $APIGEE_X_ORG from branch ${{ steps.select_branch.outputs.branch }}"
